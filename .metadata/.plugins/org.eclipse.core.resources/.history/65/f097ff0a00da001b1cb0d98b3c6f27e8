package proje.hrms.business.concretes;

import org.springframework.beans.factory.annotation.Autowired;
import proje.hrms.Menris.MernisCheckService;
import proje.hrms.business.abstracts.CandidateService;
import proje.hrms.core.*;
import proje.hrms.core.utulities.adapters.abstracts.MailCheckService;
import proje.hrms.core.utulities.adapters.abstracts.VerificationCodeService;
import proje.hrms.dataAccess.abstracts.CandidateDao;
import proje.hrms.entities.concretes.Candidate;

import java.util.List;

public class CandidateManager implements CandidateService {

	private CandidateDao candidateDao;
    private MernisCheckService mernisCheckService;
    private MailCheckService mailCheckService;
    private VerificationCodeService verificationCodeService;

    @Autowired
    public CandidateManager(CandidateDao candidateDao, MernisCheckService mernisCheckService,
                            MailCheckService mailCheckService, VerificationCodeService verificationCodeService) {
        this.candidateDao = candidateDao;
        this.mernisCheckService = mernisCheckService;
        this.mailCheckService = mailCheckService;
        this.verificationCodeService = verificationCodeService;
    }

    @Override
    public Result add(Candidate candidate) {

        if (candidate.getFirstName() == null || candidate.getLastName() == null || candidate.getBirthYear() == null
                || candidate.getIdentityNumber() == null || candidate.getEmail() == null || candidate.getPassword() == null) {
            return new ErrorResult("Boş alan bırakmayınız");

        } else if (!mernisCheckService.checkIfRealPerson(candidate)) {
            return new ErrorResult("Mernis Doğrulaması yapılamadı");

        } else if (!checkEmail(candidate.getEmail())) {
            return new ErrorResult("Email kullanılmaktadır");
        } else if (!checkNationalId(candidate.getIdentityNumber())) {
            return new ErrorResult("TC Kimlik Numarası kullanılmaktadır");
        } else {
            mailCheckService.checkEmail(candidate.getEmail());
            this.verificationCodeService.sendCode();
            this.candidateDao.save(candidate);
            return new SuccessResult("Aday eklendi");
        }
    }

    @Override
    public DataResult<List<Candidate>> getAll() {
        return new SuccessDataResult<List<Candidate>>(this.candidateDao.findAll(),
                "İş arayanlar listelendi");
    }

    @Override
    public DataResult<Candidate> getByEmail(String email) {
        return new SuccessDataResult<Candidate>(this.candidateDao.findByEmail(email));
    }

    @Override
    public DataResult<Candidate> getByIdentityNumber(String identityNumber) {
        return new SuccessDataResult<Candidate>(this.candidateDao.findByIdentityNumber(identityNumber));
    }


    private boolean checkNationalId(String identityNumber) {
        if (this.candidateDao.findByIdentityNumber(identityNumber) == null) {
            return true;
        }
        return false;
    }

    private boolean checkEmail(String email) {
        if (this.candidateDao.findByEmail(email) == null) {
            return true;
        }
        return false;
    }
}
